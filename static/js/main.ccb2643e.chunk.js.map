{"version":3,"sources":["components/ReactDayPicker.js","components/CreateForm.js","components/PostPreview.js","components/CreatePost.js","images/logo.png","components/Homepage.js","components/Filter.js","components/Post.js","components/PostListItem.js","components/PostList.js","components/Search.js","components/Body.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["ReactDayPicker","props","useState","Date","setDate","inputProps","readOnly","onDayChange","date","onChange","console","log","getTime","CreateForm","title","setTitle","image","setImage","category","setCategory","zip","setZip","description","setDescription","startDate","setStartDate","endDate","setEndDate","city","setCity","postData","useEffect","populatePost","update","postdate","parseInt","className","type","event","target","value","onClick","submit","Post","JSON","stringify","src","CreatePost","post","setPost","validateInput","alertString","includes","length","startdate","enddate","alert","add","Homepage","logo","Filter","data","keyword","setKeyword","dayKey","setDayKey","filterData","filterList","addCurrentItems","cur","Object","keys","map","key","addOnePair","hasOwnProperty","buildFilters","zipList","cityList","catList","generateOption","updateKeyword","updateZip","updateStartDate","updateEndDate","updateCity","updateCategory","newData","isItemInFilter","kwPresent","cityPresent","zipPresent","categoryPresent","afterStartDate","beforeEndDate","testKeyword","toLowerCase","testStartDate","testEndDate","testCity","testZip","testCategory","dataTitle","dataDescription","currentDate","currentCity","currentZip","currentCategory","id","name","placeholder","unshift","document","getElementById","reset","setTimeout","style","position","bottom","toDateString","PostListItem","changeDisplayPost","listNum","active","PostList","chosen","setChosen","handleClick","Search","setPostData","setData","fetch","method","redirect","then","response","text","result","catch","error","postNum","Body","require","element","getMaxId","maxId","content","item","goToSearch","Header","cursor","showHomepage","showSearch","showCreate","App","setContent","partParams","zIndex","height","width","params","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"gpIAIe,SAASA,EAAeC,GAAQ,IAAD,EACpBC,mBAAS,IAAIC,MADO,mBAC/BC,GAD+B,WAS5C,OAAO,cAAC,IAAD,CAAgBC,WAAY,CAACC,UAAS,GAAOC,YANpD,SAAkBC,GAChBJ,EAAQI,GACRP,EAAMQ,SAASD,GACfE,QAAQC,IAAIH,EAAKI,UAAU,QCPhB,SAASC,EAAWZ,GAAQ,IAAD,EACfC,mBAAS,IADM,mBACjCY,EADiC,KAC3BC,EAD2B,OAEfb,mBAAS,IAFM,mBAEjCc,EAFiC,KAE3BC,EAF2B,OAGTf,mBAAS,IAHA,mBAGjCgB,EAHiC,KAGxBC,EAHwB,OAInBjB,mBAAS,IAJU,mBAIjCkB,EAJiC,KAI7BC,EAJ6B,OAKHnB,mBAAS,IALN,mBAKjCoB,EALiC,KAKrBC,EALqB,OAMPrB,mBAAS,IANF,mBAMjCsB,EANiC,KAMvBC,EANuB,OAOXvB,mBAAS,IAPE,mBAOjCwB,EAPiC,KAOzBC,EAPyB,OAQjBzB,mBAAS,IARQ,mBAQjC0B,EARiC,KAQ5BC,EAR4B,KASpCC,EAAW,GAGfC,qBAAU,WACRC,IACA/B,EAAMgC,OAAOH,KACb,CAAChB,EAAME,EAAME,EAASE,EAAIE,EAAYE,EAAUE,EAAQE,IAI1D,IA2BMI,EAAe,WACnBF,EAAShB,MAAQA,EACjBgB,EAASd,MAAQA,EACjBc,EAASZ,SAAWA,EACpBY,EAASV,IAAMA,EACfU,EAASR,YAAcA,EACvBQ,EAASN,UAAYA,EACrBM,EAASJ,QAAUA,EACnBI,EAASF,KAAOA,EAChBE,EAASI,SAAWC,UAAS,IAAIhC,MAAOS,UAAY,MAMtD,OACE,sBAAKwB,UAAU,gIAAf,UACE,uBAAMA,UAAU,cAAhB,UACE,qBAAKA,UAAU,OAAf,SACE,gDAEE,uBACEA,UAAU,gFACVC,KAAK,OACL5B,SAjCQ,SAAC6B,GACnBvB,EAASuB,EAAMC,OAAOC,eAmClB,qBAAKJ,UAAU,OAAf,SACE,+CAEE,uBACEA,UAAU,gFACVC,KAAK,OACL5B,SAvCQ,SAAC6B,GACnBrB,EAASqB,EAAMC,OAAOC,eAyClB,qBAAKJ,UAAU,OAAf,SACE,8CAEE,uBACEA,UAAU,gFACVC,KAAK,OACL5B,SAzDW,SAAC6B,GACtBnB,EAAYmB,EAAMC,OAAOC,eA2DrB,qBAAKJ,UAAU,OAAf,SACE,6CAEE,uBACEA,UAAU,gFACVC,KAAK,OACL5B,SA9EM,SAAC6B,GACjBjB,EAAOiB,EAAMC,OAAOC,eAgFhB,qBAAKJ,UAAU,OAAf,SACE,0CAEE,uBACEA,UAAU,gFACVC,KAAK,OACL5B,SA9EO,SAAC6B,GAClBT,EAAQS,EAAMC,OAAOC,eAgFjB,qBAAKJ,UAAU,OAAf,SACE,iDAEE,0BACEA,UAAU,gFACV3B,SAhFc,SAAC6B,GACzBf,EAAee,EAAMC,OAAOC,eAkFxB,qBAAKJ,UAAU,OAAf,SACE,gDACE,cAACpC,EAAD,CAA8BS,SAjGhB,SAACD,GACvBiB,EAAajB,EAAKI,UAAU,OAgGC,cAGzB,qBAAKwB,UAAU,OAAf,SACE,8CACE,cAACpC,EAAD,CAA4BS,SAnGhB,SAACD,GACrBmB,EAAWnB,EAAKI,UAAU,OAkGG,eAI3B,wBAAQwB,UAAU,8GAA8GK,QAAU,WArE5IxC,EAAMyC,UAqEJ,uBCjIS,SAASC,EAAK1C,GAmB3B,OAhBG2C,KAAKC,UAAU5C,EAAM6B,WAAac,KAAKC,UAAU,IAElD,qBAAKT,UAAU,2FAAf,kBAKA,sBAAKA,UAAU,uFAAf,UACI,mBAAGA,UAAU,8BAAb,0BACF,8BAAMnC,EAAM6B,SAAShB,QACrB,qBACEsB,UAAU,eACVU,IAAK7C,EAAM6B,SAASd,QACtB,4BAAIf,EAAM6B,SAASR,iBCdV,SAASyB,EAAW9C,GAAQ,IAAD,EACfC,mBAAS,IADM,gCAEjBA,mBAAS,CAC9B,MAAS,GACT,MAAS,GACT,IAAQ,GACR,KAAS,GACT,SAAa,GACb,SAAa,GACb,UAAc,GACd,QAAY,GACZ,YAAgB,MAXsB,mBAEjC8C,EAFiC,KAE5BC,EAF4B,KA2BlCC,EAAgB,WACpB,IAAIC,EAAc,GAmBlB,MAlBkB,KAAfH,EAAKlC,QACNqC,GAAe,6BAEC,KAAfH,EAAKhC,OAAiBgC,EAAKhC,MAAMoC,SAAS,UAC3CD,GAAe,uDAED,KAAbH,EAAK5B,KAAc4B,EAAK5B,IAAIiC,OAAS,KACtCF,GAAe,4BAEA,KAAdH,EAAKpB,OACNuB,GAAe,6BAEI,KAAlBH,EAAK9B,WACNiC,GAAe,iCAEK,KAAnBH,EAAKM,WAAqC,KAAjBN,EAAKO,UAC/BJ,GAAe,6CAEdA,EAAYE,OAAS,KACtBG,MAAML,IACC,IAKX,OACE,sBAAKf,UAAU,0BAAf,UACE,cAACvB,EAAD,CAAYoB,OAzCM,SAACe,GACrBC,EAAQD,IAwC6BN,OApCxB,WACVQ,KACDjD,EAAMwD,IAAIT,MAmCV,qBAAKZ,UAAU,SAAf,SACE,cAACO,EAAD,CAAab,SAAUkB,SC9DhB,UAA0B,iCCG1B,SAASU,IACtB,OACE,qCACA,qBAAKtB,UAAU,gCAAf,+DAGA,sBAAKA,UAAU,0BAAf,UACE,qBAAKA,UAAU,0DAAf,SACE,qBAAKU,IAAKa,EAAMvB,UAAU,sCAE5B,qBAAKA,UAAU,qCAAf,SACE,sBAAKA,UAAU,uFAAf,UACE,qBAAKA,UAAU,OAAf,8BACA,mDACA,8D,YCdK,SAASwB,EAAO3D,GAAQ,IAAD,EACbC,mBAASD,EAAM4D,MADF,mBAC7BA,EAD6B,aAEd3D,mBAAS,QAFK,mBAE7BkB,EAF6B,KAExBC,EAFwB,OAGNnB,mBAAS,MAHH,mBAG7B4D,EAH6B,KAGpBC,EAHoB,OAIL7D,mBAAS,OAJJ,mBAI7BgB,EAJ6B,KAIpBC,EAJoB,OAKbjB,mBAAS,OALI,mBAK7B0B,EAL6B,KAKxBC,EALwB,OAMH3B,mBAAS,MANN,mBAM7BsB,EAN6B,KAMnBC,EANmB,OAOPvB,mBAAS,MAPF,mBAO7BwB,EAP6B,KAOrBC,EAPqB,OAQTzB,mBAAS,GARA,mBAQ7B8D,EAR6B,KAQtBC,EARsB,KASpClC,qBAAU,WACRmC,EAAWL,KACX,CAACC,EAAQ1C,EAAIF,EAASU,EAAKJ,EAAUE,IACvC,IAAIyC,EAAa,GAMXC,EAAkB,SAACC,GACvBC,OAAOC,KAAKF,GAAKG,KAAI,SAACC,GACpBC,EAAWD,EAAIJ,EAAII,QAGjBC,EAAa,SAACD,EAAIjC,GACnB2B,EAAWQ,eAAeF,GACvBN,EAAWM,GAAKrB,SAASZ,KAC3B2B,EAAWM,GAAX,sBAAsBN,EAAWM,IAAQ,CAACjC,KAG5C2B,EAAWM,GAAO,CAACjC,KAhBF,SAACqB,GACpBS,OAAOC,KAAKV,GAAMW,KAAI,SAACC,GACrBL,EAAgBP,EAAKY,OAkBzBG,CAAa3E,EAAM4D,MAGnB,IA8DsBgB,EA5BEC,EA7BIC,EALtBC,EAAiB,SAACnB,GACtB,OAAO,iCAASA,KAmFZoB,EAAgB,SAAC3C,GACrByB,EAAWzB,EAAMC,OAAOC,QAEpB0C,EAAY,SAAC5C,GACjBjB,EAAOiB,EAAMC,OAAOC,QAEhB2C,EAAkB,SAAC3E,GACvBiB,EAAajB,EAAKI,UAAU,MAExBwE,EAAgB,SAAC5E,GACrBmB,EAAWnB,EAAKI,UAAU,MAEtByE,EAAa,SAAC/C,GAClBT,EAAQS,EAAMC,OAAOC,QAEjB8C,EAAiB,SAAChD,GACtBnB,EAAYmB,EAAMC,OAAOC,QAKrB0B,EAAa,SAACL,GAClB,IAAI0B,EAAU,GACdjB,OAAOC,KAAKV,GAAMW,KAAI,SAACC,GAClBe,EAAe3B,EAAKY,MACrBc,EAAQd,GAAOZ,EAAKY,OAGxBxE,EAAMgC,OAAOsD,IAITC,EAAiB,SAAC3B,GACtB,IAAI4B,GAAY,EACZC,GAAc,EACdC,GAAa,EACbC,GAAkB,EAElBC,GAAiB,EACjBC,GAAgB,EAmBpB,OAlBc,MAAXhC,IACD2B,EAAYM,EAAYjC,EAAQkC,cAAcnC,EAAK/C,MAAMkF,cAAcnC,EAAKvC,YAAY0E,gBAE1E,MAAbxE,IACDqE,EAAiBI,EAAcpC,EAAK3B,WAExB,MAAXR,IACDoE,EAAgBI,GAAYrC,EAAK3B,WAExB,OAARN,IACD8D,EAAcS,GAAStC,EAAKjC,OAEpB,OAAPR,IACDuE,EAAaS,GAAQvC,EAAKzC,MAEb,OAAZF,IACD0E,EAAkBS,GAAaxC,EAAK3C,WAE/BuE,GAAaC,GAAeC,GAAcC,GAAmBC,GAAkBC,GAIlFC,EAAc,SAACjC,EAAQwC,EAAUC,GACrC,SAAGD,EAAUlD,SAASU,KAAYyC,EAAgBnD,SAASU,KAKvDmC,EAAgB,SAACO,GACrB,OAAGA,GAAehF,GAKd0E,GAAc,SAACM,GACnB,OAAGA,GAAe9E,GAKdyE,GAAW,SAACM,GAChB,OAAGA,EAAYT,eAAiBpE,EAAKoE,eAKjCI,GAAU,SAACM,GACf,OAAGA,GAActF,GAKbiF,GAAe,SAACM,GACpB,OAAIA,EAAgBX,eAAiB9E,EAAS8E,eAgBhD,OACE,sBAAK5D,UAAU,uGAAf,UACE,uBAAMwE,GAAG,SAASxE,UAAU,+BAA5B,UA1KI,qBAAKA,UAAU,mBAAf,SAAkC,oDAAsB,uBACtD,uBACEA,UAAU,0FACVyE,KAAK,UACLxE,KAAK,OACLyE,YAAY,mBACZrG,SAAUwE,UA1BMF,EAgMFZ,EAAWjD,SA/LnC6D,EAAQgC,QAAQ,OACR,qBAAK3E,UAAU,OAAf,SAAsB,gCACpB,sBAAKA,UAAU,mBAAf,UACE,4CAGA,8BACE,wBAAQA,UAAU,aAAa3B,SAAU6E,EAAzC,SACGP,EAAQP,IAAIQ,gBAoBPF,EAoKFX,EAAWvC,KAnK/BkD,EAASiC,QAAQ,OACT,qBAAK3E,UAAU,OAAf,SAAsB,gCACpB,sBAAKA,UAAU,mBAAf,UACE,wCAGA,8BACE,wBAAQA,UAAU,aAAa3B,SAAU4E,EAAzC,SACGP,EAASN,IAAIQ,gBAmBVH,EAyIFV,EAAW/C,IAxI7ByD,EAAQkC,QAAQ,OACR,qBAAK3E,UAAU,OAAf,SAAsB,gCACpB,sBAAKA,UAAU,mBAAf,UACE,2CAGA,8BACE,wBAAQA,UAAU,aAAa3B,SAAUyE,EAAzC,SACGL,EAAQL,IAAIQ,eAlBrB,qBAAK5C,UAAU,OAAf,SAAsB,gDAAkB,uBACtC,cAACpC,EAAD,CAAwCS,SAAU0E,GAAlD,gBAA8BnB,SAIhC,qBAAK5B,UAAU,OAAf,SAAsB,8CAAgB,uBACpC,cAACpC,EAAD,CAAsCS,SAAU2E,GAAhD,cAA4BpB,YAgJpC,wBAAQvB,QAlBS,WACnBuE,SAASC,eAAe,UAAUC,QAClCjD,EAAUD,EAAS,GACnBvC,EAAa,MACbE,EAAW,MACXwF,YAAW,WAAQlH,EAAMiH,UAAW,MAaH9E,UAAU,8GAAzC,6BChPS,SAASO,EAAK1C,GAwB3B,OApBG2C,KAAKC,UAAU5C,EAAM6B,WAAac,KAAKC,UAAU,IAElD,qBAAKT,UAAU,2FAAf,kBAKA,sBAAKA,UAAU,sHAAf,UACE,qBAAKA,UAAU,gBAAf,SAAgCnC,EAAM6B,SAAShB,QAC/C,qBACEsB,UAAU,+CACVU,IAAK7C,EAAM6B,SAASd,QACtB,2CAAcf,EAAM6B,SAASZ,YAC7B,mBAAGkB,UAAU,yBAAb,SAAuCnC,EAAM6B,SAASR,cACtD,qBAAKc,UAAU,sBACXgF,MAAO,CAACC,SAAS,WAAWC,OAAO,GADvC,SAEE,4BAAI,IAAInH,KAA+B,IAA1BF,EAAM6B,SAASI,UAAiBqF,sBCpBtC,SAASC,EAAavH,GAOnC,OACE,sBAAKwC,QALa,WAClBxC,EAAMwH,kBAAkBxH,EAAMyH,SAC9BzH,EAAMwC,QAAQxC,EAAMyH,UAGOtF,UAAS,+GAA0GnC,EAAM0H,OAAS,SAAW,IAAxK,UACE,mBAAGvF,UAAU,2BAAb,SACGnC,EAAM4D,KAAK/C,QAEd,sBAAKsB,UAAU,mBAAf,UACE,mBAAGA,UAAU,iDAAb,SACG,IAAIjC,KAA2B,IAAtBF,EAAM4D,KAAK3B,UAAiBqF,iBAExC,oBAAGnF,UAAU,kDAAb,UACCnC,EAAM4D,KAAKjC,KADZ,gBCfO,SAASgG,EAAS3H,GAAQ,IAAD,EACXC,qBADW,mBAC/B2H,EAD+B,KACxBC,EADwB,KAIhCC,EAAc,SAACtD,GAEjBqD,EADCrD,GAAOoD,EACE,GAEApD,IAGd,OACE,qBAAKrC,UAAU,mFAAf,SACGkC,OAAOC,KAAKtE,EAAM4D,MAAMW,KAAI,SAACC,GAAD,OAC3B,cAAC+C,EAAD,CACE3D,KAAM5D,EAAM4D,KAAKY,GAEjBiD,QAASjD,EACTkD,OAAQlD,IAAQoD,EAChBJ,kBAAmBxH,EAAMwH,kBACzBhF,QAASsF,GAJJtD,QCbA,SAASuD,EAAO/H,GAAQ,IAAD,EACVC,mBAAS,MADC,gCAEJA,oBAAS,IAFL,gCAGJA,mBAAS,KAHL,mBAG7B4B,EAH6B,KAGnBmG,EAHmB,OAIZ/H,mBAASD,EAAM4D,MAJH,mBAI7BA,EAJ6B,KAIvBqE,EAJuB,KAOpCnG,qBAAU,WAMRoG,MAAM,8BAJe,CACnBC,OAAQ,MACRC,SAAU,WAGTC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAI/H,QAAQC,IAAI8H,MAC3BC,OAAM,SAAAC,GAAK,OAAIjI,QAAQC,IAAI,QAASgI,QACtC,IAqBH,OACE,sBAAKvG,UAAU,2CAAf,UACE,sBAAKA,UAAU,8BAAf,UACE,cAACwB,EAAD,CAAQC,KAAM5D,EAAM4D,KAAMqD,MAPL,WACzBgB,EAAQjI,EAAM4D,OAM2C5B,OAZ/B,SAACsD,GAC3B2C,EAAQ3C,MAYJ,qBACEnD,UAAS,eACTU,IAAKa,OAET,cAACiE,EAAD,CAAU/D,KAAMA,EAAM4D,kBA1BA,SAACmB,GACtB9G,GAAY7B,EAAM4D,KAAK+E,GACxBX,EAAY,IAEZA,EAAYhI,EAAM4D,KAAK+E,OAuBvB,cAAC,EAAD,CAAM9G,SAAUA,OChDP,SAAS+G,EAAK5I,GAC3B,IAAI4D,EAAOiF,EAAQ,KACfC,EAAU,GAQRC,EAAW,SAACnF,GAChB,IAAIoF,EAAQ,EAMZ,OALA3E,OAAOC,KAAKV,GAAMW,KAAI,SAACC,GAClBtC,SAASsC,GAAOwE,IACjBA,EAAQ9G,SAASsC,OAGdwE,GAST,OANEF,EADkB,UAAjB9I,EAAMiJ,QACG,cAAClB,EAAD,CAAQnE,KAAMA,IACA,UAAjB5D,EAAMiJ,QACH,cAACnG,EAAD,CAAYU,IAjBR,SAAC0F,GACftF,EAAKmF,EAASnF,GAAQ,GAAKsF,EAC3BlJ,EAAMmJ,gBAiBI,cAAC1F,EAAD,IAGV,mCACGqF,IC/BQ,SAASM,EAAOpJ,GAC7B,OACE,sBAAKmC,UAAU,kCAAf,UACE,oBAAIA,UAAU,uCAAd,SAAqD,mBAAGgF,MAAO,CAACkC,OAAO,WAAY7G,QAASxC,EAAMsJ,aAA7C,oBACrD,wBACEnH,UAAS,0HACTK,QAASxC,EAAMuJ,WAFjB,oBAMA,wBACEpH,UAAS,2HACTK,QAASxC,EAAMwJ,WAFjB,qB,4BC4BSC,MAjCf,WAAgB,IAAD,EACiBxJ,mBAAS,YAD1B,mBACNgJ,EADM,KACGS,EADH,KAGPC,EAAad,EAAQ,KAC3BpI,QAAQC,IAAIiJ,GACZ,IAAMJ,EAAa,WACjBG,EAAW,WAQb,OACE,sBAAKvH,UAAU,eAAf,UACE,cAAC,IAAD,CACEgF,MAAO,CAAEC,SAAU,WAAWwC,OAAO,GACrCC,OAAO,OACPC,MAAM,OACNC,OAAQJ,IAEV,qBAAKxH,UAAU,SAASgF,MAAO,CAACyC,OAAO,QAAQxC,SAAS,YAAxD,SACE,cAACgC,EAAD,CAAQG,WAAYA,EAAYC,WAfnB,WACjBE,EAAW,WAciDJ,aAZzC,WACnBI,EAAW,iBAaT,qBAAKvH,UAAU,SAASgF,MAAO,CAACyC,OAAO,OAAOxC,SAAS,YAAvD,SACE,cAACwB,EAAD,CAAMK,QAASA,EAASE,WAAYI,UCrB7BS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB7B,MAAK,YAAkD,IAA/C8B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3D,SAASC,eAAe,SAM1BgD,K","file":"static/js/main.ccb2643e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport DayPickerInput from \"react-day-picker/DayPickerInput\";\r\nimport \"react-day-picker/lib/style.css\";\r\n\r\nexport default function ReactDayPicker(props) {\r\n  const [date, setDate] = useState(new Date());\r\n\r\n  function onChange(date) {\r\n    setDate(date);\r\n    props.onChange(date);\r\n    console.log(date.getTime()/1000);\r\n  }\r\n\r\n  return <DayPickerInput inputProps={{readOnly:true}} onDayChange={onChange} />;\r\n}","import React, { useState, useEffect } from 'react'\r\nimport ReactDayPicker from './ReactDayPicker';\r\n\r\nexport default function CreateForm(props) {\r\n  const [title,setTitle] = useState(\"\");\r\n  const [image,setImage] = useState(\"\");\r\n  const [category,setCategory] = useState(\"\");\r\n  const [zip,setZip] = useState(\"\");\r\n  const [description,setDescription] = useState(\"\");\r\n  const [startDate,setStartDate] = useState(\"\");\r\n  const [endDate,setEndDate] = useState(\"\");\r\n  const [city,setCity] = useState(\"\");\r\n  let postData = {};\r\n\r\n  //useEffect will trigger when one of the states are updated to update the preview\r\n  useEffect(() => {\r\n    populatePost();\r\n    props.update(postData);\r\n  },[title,image,category,zip,description,startDate,endDate,city])\r\n  \r\n  //Functions used to update the state for each of the fields\r\n  \r\n  const updateZip = (event) => {\r\n    setZip(event.target.value);\r\n  }\r\n  const updateStartDate = (date) => {\r\n    setStartDate(date.getTime()/1000);\r\n  }  \r\n  const updateEndDate = (date) => {\r\n    setEndDate(date.getTime()/1000);\r\n  }\r\n  const updateCity = (event) => {\r\n    setCity(event.target.value);\r\n  }\r\n  const updateCategory = (event) => {\r\n    setCategory(event.target.value);\r\n  }\r\n  const updateDescription = (event) => {\r\n    setDescription(event.target.value);\r\n  }\r\n  const updateTitle = (event) => {\r\n    setTitle(event.target.value);\r\n  }\r\n  const updateImage = (event) => {\r\n    setImage(event.target.value);\r\n  }\r\n  //End update state functions\r\n\r\n  //Update the postData json to be passed to the preview and the AddPost functionality\r\n  const populatePost = () => {\r\n    postData.title = title;\r\n    postData.image = image;\r\n    postData.category = category;\r\n    postData.zip = zip;\r\n    postData.description = description;\r\n    postData.startDate = startDate;\r\n    postData.endDate = endDate\r\n    postData.city = city;\r\n    postData.postdate = parseInt(new Date().getTime() / 1000);\r\n  }\r\n  //sumbit button handler\r\n  const handleClick = (event) => {\r\n    props.submit()\r\n  }\r\n  return (\r\n    <div className=\"flex items-center justify-center h-9-10 bg-gray-600 text-gray-200 font-semibold border border-gray-400 rounded shadow-xl mx-3\">\r\n      <form className=\"grid-rows-8\">\r\n        <div className='my-3'>\r\n          <label>\r\n            Post Title:\r\n            <input\r\n              className=\"bg-white text-gray-800 font-semibold border border-gray-400 rounded shadow-xl\"\r\n              type=\"text\"\r\n              onChange={updateTitle}/>\r\n          </label>\r\n        </div>\r\n        <div className='my-3'>\r\n          <label>\r\n            Image Url:\r\n            <input\r\n              className=\"bg-white text-gray-800 font-semibold border border-gray-400 rounded shadow-xl\"\r\n              type=\"text\"\r\n              onChange={updateImage}/>\r\n          </label>\r\n        </div>\r\n        <div className='my-3'>\r\n          <label>\r\n            Category:\r\n            <input\r\n              className=\"bg-white text-gray-800 font-semibold border border-gray-400 rounded shadow-xl\"\r\n              type=\"text\"\r\n              onChange={updateCategory}/>\r\n          </label>\r\n        </div>\r\n        <div className='my-3'>\r\n          <label>\r\n            Zipcode:\r\n            <input\r\n              className=\"bg-white text-gray-800 font-semibold border border-gray-400 rounded shadow-xl\"\r\n              type=\"text\"\r\n              onChange={updateZip}/>\r\n          </label>\r\n        </div>\r\n        <div className='my-3'>\r\n          <label>\r\n            City:\r\n            <input\r\n              className=\"bg-white text-gray-800 font-semibold border border-gray-400 rounded shadow-xl\"\r\n              type=\"text\"\r\n              onChange={updateCity}/>\r\n          </label>\r\n        </div>\r\n        <div className='my-3'>\r\n          <label>\r\n            Description:\r\n            <textarea\r\n              className=\"bg-white text-gray-800 font-semibold border border-gray-400 rounded shadow-xl\"\r\n              onChange={updateDescription}/>            \r\n          </label>\r\n        </div>\r\n        <div className=\"my-1\">\r\n          <label>Start Date:\r\n            <ReactDayPicker key={\"start\"} onChange={updateStartDate}/>\r\n          </label>\r\n        </div>\r\n        <div className=\"my-3\">\r\n          <label>End Date:\r\n            <ReactDayPicker key={\"end\"} onChange={updateEndDate}/>\r\n          </label>\r\n        </div>\r\n      </form>\r\n      <button className=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow my-3\" onClick={ () => {\r\n          handleClick()\r\n          }}>\r\n          Submit\r\n        </button>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Post(props) {\r\n  let element = \"\";\r\n  //Handles post preview for the create post page\r\n  if(JSON.stringify(props.postData) == JSON.stringify({})){\r\n    element =     \r\n    <div className='col-span-8 bg-white text-gray-800 font-semibold border border-gray-400 rounded shadow-xl'>\r\n      Post\r\n    </div>\r\n  }else{\r\n    element = \r\n    <div className='h-full bg-white text-gray-800 font-semibold border border-gray-400 rounded shadow-xl'>\r\n        <p className=\"h-1-10 text-black font-bold\">POST PREVIEW</p>\r\n      <div>{props.postData.title}</div>\r\n      <img\r\n        className=\"w-3/6 myl-25\"\r\n        src={props.postData.image}/>\r\n      <p>{props.postData.description}</p>\r\n    </div>\r\n  }\r\n  return (\r\n    element\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport CreateForm from './CreateForm';\r\nimport PostPreview from './PostPreview';\r\n\r\nexport default function CreatePost(props) {\r\n  const [title,setTitle] = useState(\"\");\r\n  const [post,setPost] = useState({\r\n    \"title\": \"\",\r\n    \"image\": \"\",\r\n    \"zip\" : \"\",\r\n    \"city\" : \"\",\r\n    \"category\" : \"\",\r\n    \"postdate\" : \"\",\r\n    \"startdate\" : \"\",\r\n    \"enddate\" : \"\",\r\n    \"description\" : \"\"\r\n  });\r\n\r\n  //update the post state to be passed to the preview and submit\r\n  const updatePreview = (post) => {\r\n    setPost(post);\r\n  }\r\n  \r\n  //handle the submit click\r\n  const submit = () => {\r\n    if(validateInput()){\r\n      props.add(post);\r\n    }\r\n  }\r\n\r\n  //check that input is properly formatted\r\n  const validateInput = () => {\r\n    let alertString = \"\";\r\n    if(post.title === \"\"){\r\n      alertString += \"Post must have a title.\\n\";\r\n    }\r\n    if(post.image === \"\" || !post.image.includes(\"http\")){\r\n      alertString += \"Image must be present and hosted by third party.\\n\";\r\n    }\r\n    if(post.zip === \"\" || post.zip.length < 5){\r\n      alertString += \"Posts must have a zip.\\n\";\r\n    }\r\n    if(post.city === \"\"){\r\n      alertString += \"Posts must have a city.\\n\";\r\n    }\r\n    if(post.category === \"\"){\r\n      alertString += \"Posts must have a category.\\n\";\r\n    }\r\n    if(post.startdate === \"\" || post.enddate === \"\"){\r\n      alertString += \"Posts must have a start and end date.\\n\";\r\n    }\r\n    if(alertString.length > 0){\r\n      alert(alertString);\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  return (\r\n    <div className='grid grid-cols-2 h-9-10'>\r\n      <CreateForm update={updatePreview} submit={submit}/>\r\n      <div className='h-9-10'>\r\n        <PostPreview postData={post}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.e060f5cf.png\";","import React from 'react'\r\nimport logo from './../images/logo.png'\r\n\r\nexport default function Homepage() {\r\n  return (\r\n    <>\r\n    <div className='text-white font-bold text-2xl'>\r\n      Welcome to WAP: Web Advertising For Professionals\r\n    </div>\r\n    <div className=\"grid grid-cols-2 h-9-10\">\r\n      <div className=\"grid justify-items-center flex flex-wrap content-center\">\r\n        <img src={logo} className=\"w-3/6 justify-self-auto rounded\"/>\r\n      </div>\r\n      <div className=\"col-start-2 grid grid-rows-6 mr-40\">\r\n        <div className=\"row-start-2 row-span-3 bg-gray-400 bg-opacity-40 rounded grid grid-rows-3 text-white\">\r\n          <div className=\"mt-4\">Homepage Content</div>\r\n          <div>Homepage Content</div>\r\n          <div>Homepage Content</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport ReactDayPicker from './ReactDayPicker';\r\n\r\nexport default function Filter(props) {\r\n  const [data,setData] = useState(props.data);\r\n  const [zip, setZip] = useState(\"All\");\r\n  const [keyword, setKeyword] = useState(null);\r\n  const [category,setCategory] = useState(\"All\");\r\n  const [city,setCity] = useState(\"All\");\r\n  const [startDate,setStartDate] = useState(null);\r\n  const [endDate,setEndDate] = useState(null);\r\n  const [dayKey,setDayKey] = useState(1);\r\n  useEffect(() => {\r\n    filterData(data);\r\n  },[keyword,zip,category,city,startDate,endDate]);//Only filter data on changes to the states\r\n  let filterList = {};\r\n  const buildFilters = (data) => {\r\n    Object.keys(data).map((key) => {\r\n      addCurrentItems(data[key]);\r\n    })\r\n  }\r\n  const addCurrentItems = (cur) => {\r\n    Object.keys(cur).map((key) => {\r\n      addOnePair(key,cur[key]);\r\n    })\r\n  }\r\n  const addOnePair = (key,value) => {\r\n    if(filterList.hasOwnProperty(key)){\r\n      if(!filterList[key].includes(value)){\r\n        filterList[key] = [...filterList[key],...[value]];\r\n      }\r\n    }else{\r\n      filterList[key] = [value];\r\n    }\r\n  }\r\n\r\n  buildFilters(props.data);\r\n\r\n  //Function used to generate options on a map call.\r\n  const generateOption = (data) => {\r\n    return <option>{data}</option>;\r\n  }\r\n\r\n  //START: Functions used to build the different DOM elements of the filter\r\n  const generateCategories = (catList) => {\r\n    catList.unshift(\"All\");\r\n    return  <div className=\"my-2\"><label>\r\n              <div className=\"grid grid-cols-2\">\r\n                <div>\r\n                  Category:\r\n                </div>\r\n                <div>\r\n                  <select className='text-black' onChange={updateCategory}>\r\n                    {catList.map(generateOption)}\r\n                  </select>\r\n                </div>\r\n              </div>\r\n      \r\n      \r\n      \r\n\r\n            </label></div>;\r\n  }\r\n  const generateKeyword = () => {\r\n  return  <div className=\"my-1 text-center\"><label>Keyword Search:<br></br>\r\n            <input\r\n              className=\"bg-white text-gray-800 font-semibold border border-gray-400 rounded shadow-xl flex-grow\"\r\n              name='keyword'\r\n              type='text'\r\n              placeholder=\"Type Keywords...\"\r\n              onChange={updateKeyword}/>\r\n            </label></div>;\r\n  }\r\n  const generateCities = (cityList) => {\r\n    cityList.unshift(\"All\");\r\n    return  <div className=\"my-2\"><label>\r\n              <div className=\"grid grid-cols-2\">\r\n                <div>\r\n                  City:\r\n                </div>\r\n                <div>\r\n                  <select className='text-black' onChange={updateCity}>\r\n                    {cityList.map(generateOption)}\r\n                  </select>\r\n                </div>\r\n              </div>\r\n      \r\n      \r\n\r\n            </label></div>;\r\n  }\r\n  const generateStartDate = () => {\r\n    return  <div className=\"my-1\"><label>Start Date:<br></br>\r\n              <ReactDayPicker key={`start-${dayKey}`} onChange={updateStartDate}/>\r\n            </label></div>\r\n  }\r\n  const generateEndDate = () => {\r\n    return  <div className=\"my-1\"><label>End Date:<br></br>\r\n              <ReactDayPicker key={`end-${dayKey}`} onChange={updateEndDate}/>\r\n            </label></div>\r\n  }\r\n  const generateZips = (zipList) => {\r\n    zipList.unshift(\"All\")\r\n    return  <div className=\"my-1\"><label>\r\n              <div className=\"grid grid-cols-2\">\r\n                <div>\r\n                  Zipcode:\r\n                </div>\r\n                <div>\r\n                  <select className='text-black' onChange={updateZip}>\r\n                    {zipList.map(generateOption)}\r\n                  </select>\r\n                </div>\r\n              </div>\r\n      \r\n      \r\n              \r\n            </label>\r\n            </div>\r\n  }\r\n  //END: Generate dom elements\r\n\r\n  //START: Update state functions\r\n  const updateKeyword = (event) =>{\r\n    setKeyword(event.target.value);\r\n  }\r\n  const updateZip = (event) => {\r\n    setZip(event.target.value);\r\n  }\r\n  const updateStartDate = (date) => {\r\n    setStartDate(date.getTime()/1000);\r\n  }  \r\n  const updateEndDate = (date) => {\r\n    setEndDate(date.getTime()/1000);\r\n  }\r\n  const updateCity = (event) => {\r\n    setCity(event.target.value);\r\n  }\r\n  const updateCategory = (event) => {\r\n    setCategory(event.target.value);\r\n  }\r\n  //END: Update state functions\r\n\r\n  //Filter the input based on current search filter options, then update the current data being shown in the search\r\n  const filterData = (data) => {\r\n    let newData = {};\r\n    Object.keys(data).map((key) => {\r\n      if(isItemInFilter(data[key])){\r\n        newData[key] = data[key];\r\n      }\r\n    })\r\n    props.update(newData);\r\n  }\r\n\r\n  //Check if a single item matches the current filter values, returns boolean\r\n  const isItemInFilter = (data) => {\r\n    let kwPresent = true;\r\n    let cityPresent = true;\r\n    let zipPresent = true;\r\n    let categoryPresent = true;\r\n    let datePresent = true;\r\n    let afterStartDate = true;\r\n    let beforeEndDate = true;\r\n    if(keyword != null){\r\n      kwPresent = testKeyword(keyword.toLowerCase(),data.title.toLowerCase(),data.description.toLowerCase());\r\n    }\r\n    if(startDate != null){\r\n      afterStartDate = testStartDate(data.postdate);\r\n    }\r\n    if(endDate != null){\r\n      beforeEndDate = testEndDate(data.postdate);\r\n    }\r\n    if(city != \"All\"){\r\n      cityPresent = testCity(data.city);\r\n    }\r\n    if(zip != \"All\"){\r\n      zipPresent = testZip(data.zip);\r\n    }\r\n    if(category != \"All\"){\r\n      categoryPresent = testCategory(data.category);\r\n    }\r\n    return kwPresent && cityPresent && zipPresent && categoryPresent && afterStartDate && beforeEndDate;\r\n  }\r\n\r\n  //START: Helper functions used to determine if filter cases match a specific field on a object\r\n  const testKeyword = (keyword,dataTitle,dataDescription) => {\r\n    if(dataTitle.includes(keyword) || dataDescription.includes(keyword)){\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  const testStartDate = (currentDate) => {\r\n    if(currentDate >= startDate){\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  const testEndDate = (currentDate) => {\r\n    if(currentDate <= endDate){\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  const testCity = (currentCity) => {\r\n    if(currentCity.toLowerCase() == city.toLowerCase()){\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  const testZip = (currentZip) => {\r\n    if(currentZip == zip){\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  const testCategory = (currentCategory) => {\r\n    if (currentCategory.toLowerCase() == category.toLowerCase()){\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  //END: Helper functions\r\n\r\n  //Reset the filter\r\n  const resetFilters = () => {\r\n    document.getElementById('filter').reset();\r\n    setDayKey(dayKey + 1);\r\n    setStartDate(null);\r\n    setEndDate(null);\r\n    setTimeout(() => { props.reset(); },250)\r\n  }\r\n\r\n  return (\r\n    <div className=\"bg-gray-600 text-gray-200 font-semibold border border-gray-400 rounded shadow-xl mx-3 align-baseline\">\r\n      <form id=\"filter\" className='my-2 grid-rows-8 text-center'>\r\n        {generateKeyword()}\r\n        {generateCategories(filterList.category)}\r\n        {generateCities(filterList.city)}\r\n        {generateZips(filterList.zip)}\r\n        {generateStartDate()}\r\n        {generateEndDate()}\r\n      </form>\r\n      <button onClick={resetFilters} className=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow my-5\">Reset Filter</button>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Post(props) {\r\n  let element = \"\";\r\n\r\n  //Check if the passed post is empty, if not then show it on the post component\r\n  if(JSON.stringify(props.postData) == JSON.stringify({})){\r\n    element =     \r\n    <div className='col-span-8 bg-white text-gray-800 font-semibold border border-gray-400 rounded shadow-xl'>\r\n      Post\r\n    </div>\r\n  }else{\r\n    element = \r\n    <div className='inline-block col-span-8 bg-white text-gray-800 font-semibold border border-gray-400 rounded shadow-xl mx-2 relative'>\r\n      <div className=\"text-4xl my-2\">{props.postData.title}</div>\r\n      <img\r\n        className=\"w-3/6 myl-25 rounded max-h-80 object-contain\"\r\n        src={props.postData.image}/>\r\n      <p>Category: {props.postData.category}</p>\r\n      <p className=\"mt-10 m-auto max-w-max\">{props.postData.description}</p>\r\n      <div className=\"align-baseline mx-1\"\r\n          style={{position:'absolute',bottom:0}}>\r\n        <p>{new Date(props.postData.postdate * 1000).toDateString()}</p>\r\n      </div>      \r\n    </div>\r\n  }\r\n  return (\r\n    element\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function PostListItem(props) {\r\n\r\n  //Handles the user interaction with a specific post\r\n  const handleClick = () => {\r\n    props.changeDisplayPost(props.listNum);\r\n    props.onClick(props.listNum)\r\n  }\r\n  return (\r\n    <div onClick={handleClick} className={`bg-white hover:not(.active)bg-gray-100 border border-gray-400 rounded shadow-xl my-1 mx-1 post-item  ${props.active ? \"active\" : \"\"}`}>\r\n      <p className=\"text-gray-800 post-title\">\r\n        {props.data.title}\r\n      </p>\r\n      <div className=\"grid grid-cols-2\">\r\n        <p className=\"text-xs text-gray-300 post-city text-left px-2\">\r\n          {new Date(props.data.postdate * 1000).toDateString()}\r\n        </p>\r\n        <p className=\"text-xs text-gray-300 post-city text-right px-2\">\r\n        {props.data.city}, FL\r\n        </p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react';\r\nimport PostListItem from './PostListItem';\r\n\r\nexport default function PostList(props) {\r\n  const [chosen,setChosen] = useState();\r\n  \r\n  //This function is used to highlight the current post\r\n  const handleClick = (key) => {\r\n    if(key == chosen){\r\n      setChosen(\"\");\r\n    }else{\r\n      setChosen(key);\r\n    }\r\n  }\r\n  return (\r\n    <div className='col-span-2 grid-rows-8 bg-gray-600 border border-gray-400 rounded shadow-xl mx-2'>\r\n      {Object.keys(props.data).map((key) => \r\n        <PostListItem \r\n          data={props.data[key]}\r\n          key={key}\r\n          listNum={key}\r\n          active={key === chosen}\r\n          changeDisplayPost={props.changeDisplayPost}\r\n          onClick={handleClick}/>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport logo from './../images/logo.png'\r\nimport Filter from './Filter'\r\nimport Post from './Post'\r\nimport PostList from './PostList'\r\n\r\nexport default function Search(props) {\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [postData, setPostData] = useState({});\r\n  const [data, setData] = useState(props.data);\r\n\r\n  //Function used to fetch information from the API to get a list of all the posts\r\n  useEffect(() => {\r\n    var raw = \"\";\r\n    var requestOptions = {\r\n      method: 'GET',\r\n      redirect: 'follow'\r\n    };\r\n    fetch(\"http://localhost:5000/posts\", requestOptions)\r\n      .then(response => response.text())\r\n      .then(result => console.log(result))\r\n      .catch(error => console.log('error', error));\r\n  }, [])\r\n\r\n  //Handles changing the currently displayed post\r\n  const changeDisplayPost = (postNum) => {\r\n    if(postData == props.data[postNum]){\r\n      setPostData({});\r\n    }else{\r\n      setPostData(props.data[postNum]);\r\n    }\r\n  }\r\n\r\n  //Update the posts currently being shown in the post list\r\n  const updateFilterResults = (newData) => {\r\n    setData(newData);\r\n  }\r\n\r\n  //Reset the values currently being shown in the post list to the full set of data\r\n  const resetFilterResults = () => {\r\n    setData(props.data);\r\n  }\r\n  \r\n  return (\r\n    <div className='grid grid-cols-12 mx-3 min-h-90 relative'>\r\n      <div className=\"grid grid-rows-2 col-span-2\">\r\n        <Filter data={props.data} reset={resetFilterResults} update={updateFilterResults}/>\r\n        <img \r\n          className={`my-5 rounded`}\r\n          src={logo}/>\r\n      </div>\r\n      <PostList data={data} changeDisplayPost={changeDisplayPost}/>\r\n      <Post postData={postData}/>\r\n    </div>\r\n  )\r\n}\r\n","import React , { useState } from 'react'\r\nimport CreatePost from './CreatePost';\r\nimport Homepage from './Homepage';\r\nimport Search from './Search';\r\n\r\nexport default function Body(props) {\r\n  let data = require('../data/posts.json');\r\n  let element = \"\";\r\n\r\n  //Add an item to the post to the list\r\n  const addItem = (item) => {\r\n    data[getMaxId(data) + 1] = item;\r\n    props.goToSearch();\r\n  }\r\n  //find max idea of the current items in the post\r\n  const getMaxId = (data) => {\r\n    let maxId = 0;\r\n    Object.keys(data).map((key) => {\r\n      if(parseInt(key) > maxId){\r\n        maxId = parseInt(key);\r\n      }\r\n    })\r\n    return maxId;\r\n  }\r\n  if(props.content == 'Search'){\r\n    element = <Search data={data}/>\r\n  }else if(props.content == 'Create'){\r\n    element = <CreatePost add={addItem}/>\r\n  }else{\r\n    element = <Homepage/>\r\n  }\r\n  return (\r\n    <>\r\n      {element}\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Header(props) {\r\n  return (\r\n    <div className='header grid grid-cols-12 gap-4 '>\r\n      <h1 className='title my-3 text-white text-4xl ml-10'><a style={{cursor:'pointer'}} onClick={props.showHomepage}>Home</a></h1>\r\n      <button \r\n        className={`col-start-8 bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow my-3`}\r\n        onClick={props.showSearch}\r\n      >\r\n        Search\r\n      </button>\r\n      <button \r\n        className={`col-start-10 bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow my-3`}\r\n        onClick={props.showCreate}\r\n      >\r\n        Post\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n","import React , { useState } from 'react';\r\nimport Body from './components/Body';\r\nimport Header from './components/Header';\r\nimport Particles from 'react-particles-js';\r\nimport './App.css';\r\nimport './index.css';\r\n\r\nfunction App() {\r\n  const [content, setContent] = useState(\"Homepage\");\r\n  // const partParams = require('./data/particlesjs-config.json');\r\n  const partParams = require('./data/parts.json');\r\n  console.log(partParams);\r\n  const showSearch = () => {\r\n    setContent(\"Search\");\r\n  }\r\n  const showCreate = () => {\r\n    setContent(\"Create\");\r\n  }\r\n  const showHomepage = () => {\r\n    setContent(\"Homepage\");\r\n  }\r\n  return (\r\n    <div className=\"App h-screen\">\r\n      <Particles\r\n        style={{ position: \"absolute\",zIndex:0}}\r\n        height=\"100%\"\r\n        width=\"100%\"\r\n        params={partParams}\r\n      />\r\n      <div className=\"h-1-10\" style={{zIndex:9999999,position:\"relative\"}}>\r\n        <Header showSearch={showSearch} showCreate={showCreate} showHomepage={showHomepage}/>\r\n      </div>\r\n      <div className=\"h-9-10\" style={{zIndex:999999,position:\"relative\"}}>\r\n        <Body content={content} goToSearch={showSearch}/>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}